{"version":3,"sources":["Redux/types.js","constants/index.js","components/ListPictures.js","Redux/actions.js","components/CreateNewPic.js","components/Pictures.js","Redux/reducers.js","Redux/store.js","components/App.js","serviceWorker.js","index.js"],"names":["Types","POSTS_LOADING","GET_POSTS","DELETE_POST","CREATE_POST","API_URL","ListPictures","deletePost","pk","props","info","this","getPosts","message","Meta","Card","posts","console","log","className","gutter","map","p","span","hoverable","key","bordered","cover","href","url_pic","width","alt","titulo","src","actions","DeleteOutlined","onClick","title","description","autor","React","Component","mapDispatchToProps","dispatch","type","payload","axios","get","then","response","data","catch","err","cb","delete","connect","state","CreateNewPic","values","createPost","layout","labelCol","wrapperCol","name","onFinish","bind","validateMessages","required","types","yeay","number","range","Item","label","rules","min","max","offset","htmlType","post","Pictures","handleClick","e","setState","selected","Header","Layout","Content","Footer","style","position","zIndex","theme","mode","defaultSelectedKeys","toString","padding","marginTop","minHeight","textAlign","initialState","loading","postReducer","action","filter","id","middlewares","thunk","logger","reduxStore","window","REDUX_INITIAL_DATA","createStore","reducer","applyMiddleware","App","store","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.c2112b60.chunk.js","sourcesContent":["const Types = {\r\n    POSTS_LOADING: \"POSTS_LOADING\",\r\n    GET_POSTS:\"GET_POSTS\",\r\n    DELETE_POST:\"DELETE_POST\",\r\n    CREATE_POST:\"CREATE_POST\"\r\n};\r\n\r\nexport default Types\r\n","export const API_URL = \"http://192.168.99.100:8000/api/v1/\";\r\n","import React from \"react\";\r\nimport {connect} from 'react-redux'\r\nimport {getPosts, deletePost} from '../Redux/actions.js'\r\nimport {Card, Row, Col, message } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport \"antd/dist/antd.css\";\r\n\r\n\r\nclass ListPictures extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getPosts();\r\n    }\r\n\r\n    deletePost = (pk) => {\r\n        this.props.deletePost(pk, this.info);\r\n    }\r\n\r\n    info() {\r\n        message.info('Contenido eliminado');\r\n    };\r\n\r\n    render() {\r\n        const { Meta } = Card;\r\n\r\n        const posts = this.props.posts\r\n        console.log(posts)\r\n\r\n\r\n        return (\r\n          <div className=\"site-card-wrapper\">\r\n            <Row gutter={16}>\r\n            {posts.map(p => (\r\n                          <Col span={4}>\r\n                            <Card\r\n                                hoverable\r\n                                key={p.pk}\r\n                                bordered={true}\r\n                                // style={{width: 240}}\r\n                                cover={<a href={p.url_pic}><img width=\"240\" alt={p.titulo} src={p.url_pic} /></a>}\r\n                                actions={[\r\n                                    <DeleteOutlined key=\"delete\" onClick={()=>this.deletePost(p.pk)} />,\r\n                                ]}\r\n                            >\r\n                                <Meta title={p.titulo} description={p.autor} />\r\n                            </Card>\r\n                          </Col>\r\n\r\n                ))}\r\n              </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.posts\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    getPosts ,deletePost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListPictures)\r\n","import Types from \"./types\";\r\nimport axios from \"axios\";\r\nimport { API_URL } from \"../constants\";\r\n\r\nexport const getPosts = () => {\r\n    return dispatch => {\r\n        dispatch({type:Types.POSTS_LOADING, payload:true})\r\n        axios.get(API_URL)\r\n            .then(response => {\r\n                    dispatch({type:Types.GET_POSTS, payload:response.data})\r\n                }\r\n            )\r\n            .catch(err => {\r\n                    console.log(err)\r\n                    dispatch({type:Types.POSTS_LOADING, payload:false})\r\n            }\r\n            );\r\n    }\r\n}\r\n\r\nexport const deletePost = (pk,cb) => {\r\n    return dispatch => {\r\n        console.log(pk)\r\n        dispatch({type:Types.POSTS_LOADING, payload:true})\r\n        axios.delete(API_URL + pk)\r\n\r\n            .then(response => {\r\n                    dispatch({type:Types.DELETE_POST, payload:pk});\r\n                cb();\r\n                }\r\n            )\r\n            .catch(err => {\r\n                    console.log(err)\r\n                }\r\n            );\r\n    }\r\n}\r\n\r\nexport const createPost = (data,cb) => {\r\n    return dispatch => {\r\n        axios.post(API_URL, data)\r\n            .then(response => {\r\n                console.log(response)\r\n                    dispatch({type:Types.CREATE_POST, payload:response.data});\r\n                    cb()\r\n                }\r\n            )\r\n            .catch(err => {\r\n                    console.log(err)\r\n\r\n                    dispatch({type:Types.POSTS_LOADING, payload:false})\r\n                }\r\n            );\r\n    }\r\n}\r\n// import { API_URL } from \"../constants\";\r\n//\r\n// export const getPosts = () => {\r\n//     return dispatch => {\r\n//         dispatch({type:Types.POSTS_LOADING, payload:true})\r\n//         axios.get(`${API_URL}`)\r\n//             .then(response => {\r\n//                     dispatch({type:Types.GET_POSTS, payload:response.data})\r\n//                 }\r\n//             )\r\n//             .catch(err => {\r\n//                     console.log(err)\r\n//                     dispatch({type:Types.POSTS_LOADING, payload:false})\r\n//             }\r\n//             );\r\n//     }\r\n// }\r\n//\r\n// export const deletePost = (id,cb) => {\r\n//     return dispatch => {\r\n//         dispatch({type:Types.POSTS_LOADING, payload:true})\r\n//         axios.delete(`${API_URL}${id}`)\r\n//             .then(response => {\r\n//                     dispatch({type:Types.DELETE_POST, payload:id});\r\n//                 cb();\r\n//                 }\r\n//             )\r\n//             .catch(err => {\r\n//                     console.log(err)\r\n//                 }\r\n//             );\r\n//     }\r\n// }\r\n//\r\n// export const createPost = (data,cb) => {\r\n//     return dispatch => {\r\n//         axios.post(`${API_URL}`, data)\r\n//             .then(response => {\r\n//                 console.log(response)\r\n//                     dispatch({type:Types.CREATE_POST, payload:response.data});\r\n//                     cb()\r\n//                 }\r\n//             )\r\n//             .catch(err => {\r\n//                     console.log(err)\r\n//                     dispatch({type:Types.POSTS_LOADING, payload:false})\r\n//                 }\r\n//             );\r\n//     }\r\n// }\r\n","import React from \"react\";\r\nimport {connect} from 'react-redux'\r\nimport {createPost} from '../Redux/actions'\r\nimport \"antd/dist/antd.css\";\r\nimport {Form, Input, message, Button, InputNumber} from 'antd';\r\n\r\n\r\nclass CreateNewPic extends React.Component {\r\n\r\n    onFinish(values) {\r\n        console.log(values);\r\n        this.props.createPost(values,this.info())\r\n    }\r\n\r\n    info() {\r\n        message.info('Contenido creado, yay!');\r\n    };\r\n\r\n    render() {\r\n        const posts = this.props.posts\r\n        console.log(posts)\r\n\r\n        const layout = {\r\n            labelCol: {span: 5},\r\n            wrapperCol: {span: 12},\r\n        };\r\n\r\n        const validateMessages = {\r\n            required: '${label} is required!',\r\n            types: {\r\n                autor: '${label} is not validate autor!',\r\n                titulo: '${label} is not a validate titulo!',\r\n                url_pic: '${label} is not a validate url_pic!',\r\n                yeay: '${label} is not a validate año!',\r\n            },\r\n            number: {\r\n                  range: '${label} must be between ${min} and ${max}',\r\n                },\r\n\r\n        };\r\n\r\n        return (\r\n            <Form\r\n                {...layout}\r\n                name=\"nest-messages\"\r\n                onFinish={this.onFinish.bind(this)}\r\n                validateMessages={validateMessages}>\r\n                <Form.Item name='autor' label=\"Autor\" rules={[{required: true}]}>\r\n                    <Input/>\r\n                </Form.Item>\r\n\r\n                <Form.Item name='titulo' label=\"Title\" rules={[{required: true}]}>\r\n                    <Input/>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item name='url_pic' label=\"Url_pic\" rules={[{ required: true, message: 'Please input url!' }]}>\r\n                    <Input/>\r\n                </Form.Item>\r\n\r\n                <Form.Item name='year' label=\"Year\" rules={[{ type: 'number', min: 100, max: 2222 }]}>\r\n                  <InputNumber />\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{...layout.wrapperCol, offset: 8}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.posts\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateNewPic)\r\n","import React from \"react\";\r\nimport {Layout, Menu} from 'antd';\r\nimport \"antd/dist/antd.css\";\r\nimport ListPictures from \"./ListPictures\";\r\nimport CreateNewPic from \"./CreateNewPic\";\r\n\r\n\r\nclass Pictures extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected:1\r\n        }\r\n    }\r\n    handleClick = e => {\r\n        this.setState({selected:e})\r\n    }\r\n    render() {\r\n        const { Header, Content, Footer } = Layout;\r\n\r\n        return (\r\n          <Layout>\r\n            <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\r\n              <div className=\"logo\" />\r\n              <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[this.state.selected.toString()]}>\r\n                <Menu.Item key=\"1\" onClick={() => this.handleClick(1)}>Pictures</Menu.Item>\r\n                <Menu.Item key=\"2\" onClick={() => this.handleClick(2)}>Agregar nuevo</Menu.Item>\r\n              </Menu>\r\n            </Header>\r\n            <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\r\n              <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\r\n                {this.state.selected===1?<ListPictures />: <CreateNewPic />\r\n                    }\r\n              </div>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>Dolor lorem ipsum ©2020 Created by Ant UED</Footer>\r\n          </Layout>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Pictures\r\n","import Types from \"./types\";\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    loading:false\r\n};\r\n\r\nconst postReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case Types.POSTS_LOADING: {\r\n            console.log(\"create_item\");\r\n            return {...state,loading: action.payload};\r\n        }\r\n\r\n        case Types.GET_POSTS: {\r\n          console.log(\"post\");\r\n            return {...state,posts: action.payload};\r\n        }\r\n\r\n        case Types.DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.payload)}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;\r\n","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\nimport logger from \"redux-logger\";\r\nimport reducer from \"./reducers.js\";\r\nconst middlewares = [thunk,logger];\r\n\r\n\r\n\r\nexport default function configureStore(initialState) {\r\n    const store = createStore(reducer, initialState,\r\n                                       applyMiddleware(...middlewares));\r\n    return store;\r\n}\r\n","import React from 'react';\r\nimport Pictures from \"./Pictures\";\r\nimport {Provider as ReduxProvider} from \"react-redux\";\r\nimport configureStore from \"../Redux/store\";\r\n\r\nconst reduxStore = configureStore(window.REDUX_INITIAL_DATA);\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <ReduxProvider store={reduxStore}>\r\n            <div className=\"App\">\r\n                <Pictures/>\r\n            </div>\r\n        </ReduxProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}